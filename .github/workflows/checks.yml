name: Checks

on:
  pull_request:
    branches: "*"

jobs:
  test_and_lint:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v3

      - name: Cache/Restore Mint packages
        id: mint-cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/mint
          key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
          restore-keys: ${{ runner.os }}-mint-

      - name: Check if Mint is installed
        id: mint-installed
        run: brew list | grep mint
        continue-on-error: true

      - name: Upgrade package manager "Mint"
        if: steps.mint-installed.outcome == 'success'
        run: |
          brew upgrade mint

      - name: Install package manager "Mint"
        if: steps.mint-installed.outcome != 'success'
        run: |
          brew install mint

      - name: Install command line tool (if not yet cached)
        if: steps.mint-cache.outputs.cache-hit != 'true'
        run: mint bootstrap

      - name: Run SwiftFormat lint
        run: mint run swiftformat --lint .

      # TODO: Replace with installing release when release is avaiable
      - name: Clone starknet-devnet-rs
        run: |
          git clone https://github.com/0xSpaceShard/starknet-devnet-rs.git starknet-devnet-rs
          pushd starknet-devnet-rs
          git checkout 7586b55d221e9010809a6e61b7e28e53fc9ff5c2
          popd

      - name: Cache devnet build
        uses: actions/cache@v3
        with:
          path: starknet-devnet-rs/target/release
          key: ${{ runner.os }}-starknet-devnet-rs-target-release-${{ hashFiles('starknet-devnet-rs/Cargo.lock') }}

      - name: Build devnet
        run: |
          if [[ ! -d "${{ github.workspace }}/starknet-devnet-rs/target/release" ]]; then
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            cargo build --release 
          else
            echo "Found existing starknet-devnet-rs build, skipping compilation."
          fi

      - name: Install scarb
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh -s -- -v 0.6.0
      - name: Install sncast
        run: |
          curl --proto '=https' --tlsv1.2 -LsSf https://raw.githubusercontent.com/foundry-rs/starknet-foundry/master/scripts/install.sh | sh -s -- -v 0.4.1

      - name: Run tests
        run: |
          export DEVNET_PATH="${{ github.workspace }}/starknet-devnet-rs/target/release"
          export SCARB_PATH=$(which scarb)
          export SNCAST_PAT="$(which sncast)"
          swift test --disable-sandbox
